/* csslint ignoreAtRules: ["include"] */
@use "@angular/material" as mat;

@import "variables";
@import "dark_variables";
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
// @include mat.all-legacy-component-typographies();
@include mat.legacy-core();

button,
.mat-expansion-panel,
.mat-panel,
.mat-card {
  border-radius: 0 !important;
  //font-size: 14px;
}
$asf-app-primary: mat.define-palette($mat-asf-primary, 700, 400, 900);
$asf-app-dark-primary: mat.define-palette($mat-dark-asf-primary, 700, 400, 900);

$asf-app-accent:  mat.define-palette(mat.$grey-palette, 300, 100, 400);
$asf-app-blue:  mat.define-palette($mat-asf-blue, 700, 400, 900);

// The warn palette is optional (defaults to red).
$asf-app-warn:    mat.define-palette($mat-asf-yellow, 200, 100, 500);
$asf-app-err: mat.define-palette($mat-asf-red, 200, 100, 500);
// Create the theme object (a Sass map containing all of the palettes).

// Create your Sass color vars (will be available in all the project)
$asf-warn: mat.get-color-from-palette($asf-app-warn);
$asf-err: mat.get-color-from-palette($asf-app-err);
$asf-blue: mat.get-color-from-palette($asf-app-blue);

$asf-primary: mat.get-color-from-palette($asf-app-primary);
$asf-dark-primary: mat.get-color-from-palette($asf-app-dark-primary);
$asf-accent: mat.get-color-from-palette($asf-app-accent);
$asf-primary-light: lighten($asf-primary, 40%);
$asf-primary-dark: darken($asf-primary, 15%);
$asf-background-white: lighten($asf-primary, 80%);

@mixin md-icon-size($size: 24px) {
  // color: $dark-primary-text;
  font-size: $size !important;
  height: $size !important;
  width: $size !important;
}

$themes: (
  light: (
    background-white: lighten(mat.get-color-from-palette($asf-app-primary), 80%),

    dark-primary-text: rgba(black, 0.87),
    dark-secondary-text: rgba(black, 0.54),
    dark-disabled-text: rgba(black, 0.38),
    dark-dividers: rgba(black, 0.12),
    dark-focused: rgba(black, 0.12),
    light-primary-text: white,
    light-secondary-text: rgba(white, 0.7),
    light-disabled-text: rgba(white, 0.5),
    light-dividers: rgba(white, 0.12),
    light-focused: rgba(white, 0.12),

    borders: lightgray,
    primary: mat.get-color-from-palette($asf-app-primary),
    accent: mat.get-color-from-palette($asf-app-accent),
    warn: mat.get-color-from-palette($asf-app-warn),
    err: red,// mat.get-color-from-palette($asf-app-err),
    blue-link: #236192,//mat.get-color-from-palette($asf-app-blue),
    primary-light: lighten(mat.get-color-from-palette($asf-app-primary), 40%),
    primary-dark: darken(mat.get-color-from-palette($asf-app-primary), 15%),
  ),
  dark: (
    light-primary-text: white,
    light-secondary-text: rgba(white, 0.54),
    light-disabled-text: rgba(white, 0.38),
    light-dividers: rgba(white, 0.12),
    light-focused: rgba(white, 0.12),

    dark-primary-text: rgb(183, 183, 183),
    dark-secondary-text: rgba(183, 183, 183, 0.7),
    dark-disabled-text: rgba(183, 183, 183, 0.5),
    dark-dividers: rgba(white, 0.12),
    dark-focused: rgba(white, 0.12),

    borders: lightgray,

    primary: mat.get-color-from-palette($asf-app-dark-primary),
    accent: mat.get-color-from-palette($asf-app-accent),
    warn: mat.get-color-from-palette($asf-app-warn),
    err: #f95e5e,//mat.get-color-from-palette($asf-app-err),
    blue-link: mat.get-color-from-palette($asf-app-warn),
    primary-light: lighten(mat.get-color-from-palette($asf-app-dark-primary), 5%),
    primary-dark: darken(mat.get-color-from-palette($asf-app-dark-primary), 15%),

    background-white: darken(mat.get-color-from-palette($asf-app-dark-primary), 5%),
  ),
);

@mixin themify($themes: $themes) {
  @each $theme, $map in $themes {

    :host-context(.theme-#{$theme}) & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

@mixin themify_non_host($themes: $themes) {
  @each $theme, $map in $themes {

    .theme-#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }

      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}
$my-warn: mat.define-palette(mat.$red-palette);

// .theme-dark {
//   $asf-dark-theme: mat.define-dark-theme((
//     color: (
//       primary: $asf-app-dark-primary,
//       accent:$contrast,
//       warn: $my-warn,
//     ),
//     typography: mat.define-typography-config(),
//     density: 0,
//    ));
//   @include mat.all-legacy-component-themes($asf-dark-theme);
// }

.theme-light {
  $asf-light-theme: mat.define-light-theme((
    color: (
      primary:$asf-app-primary,
      accent: $asf-app-accent,
      warn: $my-warn,
    ),
    typography: mat.define-typography-config(),
    density: 0,
   ));
  @include mat.all-legacy-component-themes($asf-light-theme);
}
